CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
PROJECT(kernel)

ADD_DEFINITIONS(-DLOG_SHOW_FILE_LINE)

FIND_PROGRAM(CMAKE_C_COMPILER gcc)
FIND_PROGRAM(CMAKE_CXX_COMPILER g++)
FIND_PROGRAM(CMAKE_LINKER ld)

ENABLE_LANGUAGE(ASM_NASM)

SET(CMAKE_C_LINK_EXECUTABLE "<CMAKE_LINKER> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")

SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)

SET(CMAKE_C_STANDARD 99)
SET(CMAKE_C_FLAGS_RELEASE "-g0 -O2")
SET(CMAKE_C_FLAGS_DEBUG "-g3 -O0")
SET(CMAKE_C_FLAGS "-m32 -fno-pic -fno-pie -ffreestanding -fno-builtin -nostdlib -nostdinc -fno-stack-protector -fno-omit-frame-pointer -fno-asynchronous-unwind-tables -Wall -Wextra")

SET(CMAKE_CXX_STANDARD 20)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -fno-exceptions -fno-rtti")
SET(CMAKE_LINKER_FLAGS "-static -nostdlib")

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/output)

SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS} -T ${CMAKE_CURRENT_SOURCE_DIR}/link.ld")

FILE(GLOB_RECURSE SRC_FILES_CXX "src/*.cpp")

MESSAGE(STATUS "C++ files: ${SRC_FILES_CXX}")
MESSAGE(STATUS "ASM files: ${ASM_FILES}")

SEPARATE_ARGUMENTS(SPLIT_C_FLAGS UNIX_COMMAND "${CMAKE_C_FLAGS}")
ADD_CUSTOM_COMMAND(
    OUTPUT crti.o
    COMMAND ${CMAKE_C_COMPILER} ${SPLIT_C_FLAGS} -c ${CMAKE_CURRENT_SOURCE_DIR}/crti.c -o crti.o
    DEPENDS crti.c
)

ADD_CUSTOM_COMMAND(
    OUTPUT crtn.o
    COMMAND ${CMAKE_C_COMPILER} ${SPLIT_C_FLAGS} -c ${CMAKE_CURRENT_SOURCE_DIR}/crtn.c -o crtn.o
    DEPENDS crtn.c
)

INCLUDE_DIRECTORIES(include)
ADD_EXECUTABLE(${PROJECT_NAME} crti.o ${SRC_FILES_CXX} crtn.o)